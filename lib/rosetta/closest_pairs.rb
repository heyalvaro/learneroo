def closest_pairs(points)
  point_quantity = points.length
  return shortest_distance(points) if point_quantity <= 3

  point_quantity % 2 == 0 ? mid = point_quantity / 2 - 1 : mid = point_quantity / 2

  dl = closest_pairs(points[0..mid])
  dr = closest_pairs(points[mid + 1 .. -1])

  d = [dl,dr].min

  strip = points.select{|point| (point[0] - points[mid][0]).abs < d }

  return [d,strip_closest(strip,d)].min

end

def strip_closest(array,distance)
  min = distance
  size = array.length - 1
  array.sort_by!{|x,y|y}
  array.each_with_index do |origin,i|
    j = i+1
    destiny = array[j]
    while j < size && (origin[1] - destiny[1]) < min
      point_distance = distance_between_points(origin, destiny)
      min = point_distance if point_distance < min
      j+=1
      destiny = array[j]
    end
  end
  return min
end

def build_pairs(points_array)
  points_array.each_slice(2).to_a
end

def distance_between_points(origin, destiny)
  return Math.sqrt((origin[0] - destiny[0])**2 + (origin[1] - destiny[1])**2)
end

def shortest_distance(array, distance = Float::INFINITY)
  min = distance
  array.each_with_index do |origin, i|
    array[i+1..-1].each do |destiny|
      point_distance = distance_between_points(origin,destiny)
      min = point_distance if point_distance < min && point_distance > 0
    end
  end
  min
end


puts closest_pairs(build_pairs(        [0.4799845404716546, 0.8312002276859107, 0.0551746041760236, 0.6752881941586123, 0.2818261198594725, 0.17615822153982597, 0.5022684810526742, 0.5298086073869323, 0.7968523470632254, 0.1810677046594078, 0.650999647666432, 0.1740062568460441, 0.3253156178590283, 0.2565225515524119, 0.9403256236380109, 0.053391734350819564, 0.36198788203532617, 0.401157669991665, 0.2411662785797939, 0.5801866366993061, 0.3332000676944663, 0.09903641177801648, 0.5816828822463483, 0.6896854392183376, 0.4882860254299275, 0.7054044082346991, 0.3682858303790776, 0.5130502301709932, 0.08535423595388769, 0.21585922520948042, 0.41075075649176673, 0.9995770845999704, 0.9185370334222841, 0.07277562416388494, 0.23267517168974283, 0.9708862076889083, 0.922343250077418, 0.45286406568670856, 0.6026085473101725, 0.27015254972990754, 0.058467431314136675, 0.3010300188419851, 0.9565407744410878, 0.3814070031041442, 0.9413846302819149, 0.22824027648707512, 0.39903536737923506, 0.13710327812722733, 0.6912870839812346, 0.2748915218070106, 0.2681455039903018, 0.9065587515193771, 0.31639471395814467, 0.4562158150043173, 0.8283520163616767, 0.9635419092601933, 0.5213990498314421, 0.952546249464031, 0.5161148164479042, 0.568193689818363, 0.21477573028204622, 0.7848053731069393, 0.3042302217887266, 0.6666328092316172, 0.1449280531945969, 0.8243683230909926, 0.17403815807886935, 0.011010590908076545, 0.03360002492557157, 0.026490609614503335, 0.3886254819049412, 0.933443938437829, 0.29472435256373675, 0.8477811604310443, 0.2455221551405693, 0.9691694405206785, 0.9278472977279477, 0.9107387903519912, 0.25398961641042506, 0.017426006140759287, 0.45749862354202797, 0.11216014331343194, 0.22985157529635047, 0.7529867032582358, 0.8533515394773672, 0.5372661647700332, 0.6299192688722389, 0.5569254467632209, 0.21074467116791296, 0.7376829698016564, 0.5584146564164558, 0.32211749848608573, 0.5971134040040796, 0.15895206911738025, 0.26939692122644443, 0.10713723490212135, 0.8771059704524208, 0.7620342266103062, 0.662048657245237, 0.7616306974816445]
                   ))